Microsoft (R) Macro Assembler Version 14.10.25019.0	    08/31/17 11:38:26
TicTacToe.asm						     Page 1 - 1


				; TicTacToe

				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				    
 00000000			.data
 00000000 20 31 20 20 20	board BYTE " 1      |2      |3      ",10,13,
	   20 20 20 7C 32
	   20 20 20 20 20
	   20 7C 33 20 20
	   20 20 20 20 0A
	   0D 20 20 20 20
	   58 20 20 20 7C
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   0A 0D 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 0A 0D 20 2D
	   2D 2D 2D 2D 2D
	   2D 2B 2D 2D 2D
	   2D 2D 2D 2D 2B
	   2D 2D 2D 2D 2D
	   2D 2D 0A 0D 20
	   34 20 20 20 20
	   20 20 7C 35 20
	   20 20 20 20 20
	   7C 36 20 20 20
	   20 20 20 0A 0D
	   20 20 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 20 20 20 0A
	   0D 20 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   0A 0D 20 2D 2D
	   2D 2D 2D 2D 2D
	   2B 2D 2D 2D 2D
	   2D 2D 2D 2B 2D
	   2D 2D 2D 2D 2D
	   2D 0A 0D 20 37
	   20 20 20 20 20
	   20 7C 38 20 20
	   20 20 20 20 7C
	   39 20 20 20 20
	   20 20 0A 0D 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 0A 0D
	   20 20 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 20 20 20 0A
	   0D 00
				           "    X   |       |       ",10,13,
				           "        |       |       ",10,13,
				           " -------+-------+-------",10,13, 
				           " 4      |5      |6      ",10,13,
				           "        |       |       ",10,13,
				           "        |       |       ",10,13,
				           " -------+-------+-------",10,13,
				           " 7      |8      |9      ",10,13, 
				           "        |       |       ",10,13,
				           "        |       |       ",10,13,0
 0000011F 58			playerX        BYTE 'X'
 00000120 4F			playerY        BYTE 'O'
 00000121 58			currentPlayer  BYTE 'X'
 00000122 00000000		choice         DWORD ?
 00000126 57 65 6C 63 6F	sIntro         BYTE "Welcome to TicTacToessembly!",0
	   6D 65 20 74 6F
	   20 54 69 63 54
	   61 63 54 6F 65
	   73 73 65 6D 62
	   6C 79 21 00
 00000143 27 73 20 74 75	sTurn          BYTE "'s turn. Choose a square: ",0
	   72 6E 2E 20 43
	   68 6F 6F 73 65
	   20 61 20 73 71
	   75 61 72 65 3A
	   20 00
 0000015E 49 6E 76 61 6C	sInvalidChoice BYTE "Invalid choice. Choose a square: ",0
	   69 64 20 63 68
	   6F 69 63 65 2E
	   20 43 68 6F 6F
	   73 65 20 61 20
	   73 71 75 61 72
	   65 3A 20 00
 00000180 20 77 69 6E 73	sWins          BYTE " wins!",0
	   21 00

 00000000			.code
				printIntro       PROTO
				printBoard       PROTO
				chooseSquare     PROTO
				switchPlayer     PROTO
				checkWinner      PROTO
				printOutro       PROTO

 00000000			main PROC
				     ; print intro
 00000000  E8 0000004F		     call printIntro
				     
				     ; prompt for choices until game is won
 00000005			Run:     
 00000005  68 00000000 R	     push OFFSET board
 0000000A  E8 0000005A		     call printBoard

 0000000F  A0 00000121 R	     mov al,currentPlayer
 00000014  50			     push eax
 00000015  68 00000000 R	     push OFFSET board
 0000001A  E8 0000005B		     call chooseSquare
				     
 0000001F  A0 00000121 R	     mov al,currentPlayer
 00000024  50			     push eax
 00000025  E8 000001E2		     call switchPlayer
				     
				     ; check if game over
 0000002A  68 00000000 R	     push OFFSET board
 0000002F  E8 000001DF		     call checkWinner
 00000034  83 F8 00		     cmp eax,0
 00000037  74 CC		     je Run

 00000039			Finish:
				     ; for testing
 00000039  68 00000000 R	     push OFFSET board
 0000003E  E8 00000026		     call printBoard
				     
				     ; print outro
 00000043  E8 000001D2		     call printOutro
				     
				     ; pause before closing window
 00000048  E8 00000000 E	     call WaitMsg
					
				     exit
 0000004D  6A 00	   *	    push   +000000000h
 0000004F  E8 00000000 E   *	    call   ExitProcess
 00000054			main ENDP

				; Prints intro.
				;    Receives: nothing
				;    Returns:  nothing
 00000054			printIntro PROC
 00000054  BA 00000126 R	     mov edx,OFFSET sIntro
 00000059  E8 00000000 E	     call WriteString
 0000005E  E8 00000000 E	     call Crlf
 00000063  E8 00000000 E	     call Crlf
 00000068  C3			     ret
 00000069			printIntro ENDP

				; Prints board.
				;    Receives: [ebp + 8] = address of board
				;    Returns:  nothing
 00000069			printBoard PROC
				    ; prepare stack frame
 00000069  55			     push ebp
 0000006A  8B EC		     mov  ebp,esp
 0000006C  60			     pushad

				     ; print board
 0000006D  8B 55 08		     mov edx,[ebp + 8]
 00000070  E8 00000000 E	     call WriteString

				     ; clean up stack frame
 00000075  61			     popad
 00000076  5D			     pop  ebp
 00000077  C2 0004		     ret  4
 0000007A			printBoard ENDP

				; Prompts player to choose a location on board to place an X. Validates input and
				; will only accept a number between 1 and 9. Cells to place at are as follows:
				; 1 = 30, 2 = 38, 3 = 46, 4 = 134, 5 = 142, 6 = 150, 7 = 238, 8 = 246, 9 = 254
				;    Receives: [ebp +  8] = address of board
				;              [ebp + 12] = currentPlayer
				;    Returns:  nothing
 0000007A			chooseSquare PROC
				    ; prepare stack frame
 0000007A  55			     push ebp
 0000007B  8B EC		     mov  ebp,esp
 0000007D  60			     pushad

				     ; loop until choice entered
 0000007E  8B 45 0C		     mov  eax,[ebp + 12]
 00000081  E8 00000000 E	     call WriteChar
 00000086  BA 00000143 R	     mov edx,OFFSET sTurn
 0000008B  E8 00000000 E	     call WriteString

 00000090			Validate:
 00000090  E8 00000000 E	     call ReadDec
 00000095  A3 00000122 R	     mov  choice,eax
 0000009A  83 3D 00000122 R	     cmp  choice,9
	   09
 000000A1  0F 87 00000151	     ja   Invalid             ; value for terms too high, jump to Invalid
 000000A7  83 3D 00000122 R	     cmp  choice,1
	   01
 000000AE  0F 82 00000144	     jb   Invalid             ; value for terms too low, jump to Invalid
 000000B4  83 3D 00000122 R	     cmp choice,1                         
	   01
 000000BB  74 69		     je Place1                ; place at cell 1
 000000BD  83 3D 00000122 R	     cmp choice,2                         
	   02
 000000C4  74 7A		     je Place2                ; place at cell 2
 000000C6  83 3D 00000122 R	     cmp choice,3                         
	   03
 000000CD  0F 84 00000087	     je Place3                ; place at cell 3
 000000D3  83 3D 00000122 R	     cmp choice,4                         
	   04
 000000DA  0F 84 00000094	     je Place4                ; place at cell 4
 000000E0  83 3D 00000122 R	     cmp choice,5                         
	   05
 000000E7  0F 84 0000009D	     je Place5                ; place at cell 5
 000000ED  83 3D 00000122 R	     cmp choice,6                         
	   06
 000000F4  0F 84 000000A6	     je Place6                ; place at cell 6
 000000FA  83 3D 00000122 R	     cmp choice,7                         
	   07
 00000101  0F 84 000000AF	     je Place7                ; place at cell 7
 00000107  83 3D 00000122 R	     cmp choice,8                         
	   08
 0000010E  0F 84 000000B8	     je Place8                ; place at cell 8
 00000114  83 3D 00000122 R	     cmp choice,9                         
	   09
 0000011B  0F 84 000000C1	     je Place9                ; place at cell 9
 00000121  E9 000000E1		     jmp  Finish

 00000126			Place1:
 00000126  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000129  83 C6 1E		     add esi,30               ; increment esi to correct cell
 0000012C  B3 20		     mov bl,' '
 0000012E  38 1E		     cmp [esi],bl             ; check if cell is empty
 00000130  0F 85 000000C2	     jne Invalid              ; jump if cell is not empty
 00000136  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 00000139  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 0000013B  E9 000000C7		     jmp Finish

 00000140			Place2:
 00000140  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000143  83 C6 26		     add esi,38               ; increment esi to correct cell
 00000146  B3 20		     mov bl,' '
 00000148  38 1E		     cmp [esi],bl             ; check if cell is empty
 0000014A  0F 85 000000A8	     jne Invalid              ; jump if cell is not empty
 00000150  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 00000153  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 00000155  E9 000000AD		     jmp Finish

 0000015A			Place3:
 0000015A  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 0000015D  83 C6 2E		     add esi,46               ; increment esi to correct cell
 00000160  B3 20		     mov bl,' '
 00000162  38 1E		     cmp [esi],bl             ; check if cell is empty
 00000164  0F 85 0000008E	     jne Invalid              ; jump if cell is not empty
 0000016A  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 0000016D  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 0000016F  E9 00000093		     jmp Finish

 00000174			Place4:
 00000174  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000177  81 C6 00000086	     add esi,134               ; increment esi to correct cell
 0000017D  B3 20		     mov bl,' '
 0000017F  38 1E		     cmp [esi],bl             ; check if cell is empty
 00000181  75 75		     jne Invalid              ; jump if cell is not empty
 00000183  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 00000186  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 00000188  EB 7D		     jmp Finish

 0000018A			Place5:
 0000018A  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 0000018D  81 C6 0000008E	     add esi,142               ; increment esi to correct cell
 00000193  B3 20		     mov bl,' '
 00000195  38 1E		     cmp [esi],bl             ; check if cell is empty
 00000197  75 5F		     jne Invalid              ; jump if cell is not empty
 00000199  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 0000019C  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 0000019E  EB 67		     jmp Finish

 000001A0			Place6:
 000001A0  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000001A3  81 C6 00000096	     add esi,150               ; increment esi to correct cell
 000001A9  B3 20		     mov bl,' '
 000001AB  38 1E		     cmp [esi],bl             ; check if cell is empty
 000001AD  75 49		     jne Invalid              ; jump if cell is not empty
 000001AF  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 000001B2  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 000001B4  EB 51		     jmp Finish

 000001B6			Place7:
 000001B6  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000001B9  81 C6 000000EE	     add esi,238               ; increment esi to correct cell
 000001BF  B3 20		     mov bl,' '
 000001C1  38 1E		     cmp [esi],bl             ; check if cell is empty
 000001C3  75 33		     jne Invalid              ; jump if cell is not empty
 000001C5  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 000001C8  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 000001CA  EB 3B		     jmp Finish

 000001CC			Place8:
 000001CC  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000001CF  81 C6 000000F6	     add esi,246               ; increment esi to correct cell
 000001D5  B3 20		     mov bl,' '
 000001D7  38 1E		     cmp [esi],bl             ; check if cell is empty
 000001D9  75 1D		     jne Invalid              ; jump if cell is not empty
 000001DB  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 000001DE  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 000001E0  EB 25		     jmp Finish

 000001E2			Place9:
 000001E2  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000001E5  81 C6 000000FE	     add esi,254               ; increment esi to correct cell
 000001EB  B3 20		     mov bl,' '
 000001ED  38 1E		     cmp [esi],bl             ; check if cell is empty
 000001EF  75 07		     jne Invalid              ; jump if cell is not empty
 000001F1  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 000001F4  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 000001F6  EB 0F		     jmp Finish

 000001F8			Invalid:
 000001F8  BA 0000015E R	     mov  edx,OFFSET sInvalidChoice
 000001FD  E8 00000000 E	     call WriteString
 00000202  E9 FFFFFE89		     jmp  Validate

 00000207			Finish:
				     ; clean up stack frame
 00000207  61			     popad
 00000208  5D			     pop  ebp
 00000209  C2 0008		     ret 8
 0000020C			chooseSquare ENDP

				; Checks to see if either player has won by looking for runs of 3 X's or O's. This is
				; done by looking at particular cells in the board array. For example, a run in the
				; first row would mean that cells 30, 38, and 46 would all be either X or O. If winner
				;    Receives: [ebp + 8] = address of board  
				;    Returns:  0 in EAX if no winner found, 1 in EAX if winner found
 0000020C			switchPlayer PROC
				    ; prepare stack frame
 0000020C  55			     push ebp
 0000020D  8B EC		     mov  ebp,esp
 0000020F  60			     pushad

				     ; procedure code here

				     ; clean up stack frame
 00000210  61			     popad
 00000211  5D			     pop  ebp
 00000212  C3			     ret
 00000213			switchPlayer ENDP

				; Checks to see if either player has won by looking for runs of 3 X's or O's. This is
				; done by looking at particular cells in the board array. For example, a run in the
				; first row would mean that cells 30, 38, and 46 would all be either X or O. If winner
				;    Receives: [ebp + 8] = address of board  
				;    Returns:  0 in EAX if no winner found, 1 in EAX if winner found
 00000213			checkWinner PROC
				    ; prepare stack frame
 00000213  55			     push ebp
 00000214  8B EC		     mov  ebp,esp
 00000216  60			     pushad

				     ; procedure code here

				     ; clean up stack frame
 00000217  61			     popad
 00000218  5D			     pop  ebp
 00000219  C3			     ret
 0000021A			checkWinner ENDP

				; Prints outro.
				;    Receives: nothing
				;    Returns:  nothing
 0000021A			printOutro PROC
				    ; prepare stack frame
 0000021A  55			     push ebp
 0000021B  8B EC		     mov  ebp,esp
 0000021D  60			     pushad

				     ; procedure code here

				     ; clean up stack frame
 0000021E  61			     popad
 0000021F  5D			     pop  ebp
 00000220  C3			     ret
 00000221			printOutro ENDP

				END main
Microsoft (R) Macro Assembler Version 14.10.25019.0	    08/31/17 11:38:26
TicTacToe.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000187 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000221 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkWinner  . . . . . . . . . .	P Near	 00000213 _TEXT	Length= 00000007 Public STDCALL
chooseSquare . . . . . . . . . .	P Near	 0000007A _TEXT	Length= 00000192 Public STDCALL
  Validate . . . . . . . . . . .	L Near	 00000090 _TEXT	
  Place1 . . . . . . . . . . . .	L Near	 00000126 _TEXT	
  Place2 . . . . . . . . . . . .	L Near	 00000140 _TEXT	
  Place3 . . . . . . . . . . . .	L Near	 0000015A _TEXT	
  Place4 . . . . . . . . . . . .	L Near	 00000174 _TEXT	
  Place5 . . . . . . . . . . . .	L Near	 0000018A _TEXT	
  Place6 . . . . . . . . . . . .	L Near	 000001A0 _TEXT	
  Place7 . . . . . . . . . . . .	L Near	 000001B6 _TEXT	
  Place8 . . . . . . . . . . . .	L Near	 000001CC _TEXT	
  Place9 . . . . . . . . . . . .	L Near	 000001E2 _TEXT	
  Invalid  . . . . . . . . . . .	L Near	 000001F8 _TEXT	
  Finish . . . . . . . . . . . .	L Near	 00000207 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000054 Public STDCALL
  Run  . . . . . . . . . . . . .	L Near	 00000005 _TEXT	
  Finish . . . . . . . . . . . .	L Near	 00000039 _TEXT	
printBoard . . . . . . . . . . .	P Near	 00000069 _TEXT	Length= 00000011 Public STDCALL
printIntro . . . . . . . . . . .	P Near	 00000054 _TEXT	Length= 00000015 Public STDCALL
printOutro . . . . . . . . . . .	P Near	 0000021A _TEXT	Length= 00000007 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
switchPlayer . . . . . . . . . .	P Near	 0000020C _TEXT	Length= 00000007 Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
board  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
choice . . . . . . . . . . . . .	DWord	 00000122 _DATA	
currentPlayer  . . . . . . . . .	Byte	 00000121 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
playerX  . . . . . . . . . . . .	Byte	 0000011F _DATA	
playerY  . . . . . . . . . . . .	Byte	 00000120 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sIntro . . . . . . . . . . . . .	Byte	 00000126 _DATA	
sInvalidChoice . . . . . . . . .	Byte	 0000015E _DATA	
sTurn  . . . . . . . . . . . . .	Byte	 00000143 _DATA	
sWins  . . . . . . . . . . . . .	Byte	 00000180 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
