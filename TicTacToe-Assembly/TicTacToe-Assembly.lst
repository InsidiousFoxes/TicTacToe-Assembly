Microsoft (R) Macro Assembler Version 14.10.25019.0	    09/02/17 20:28:42
TicTacToe.asm						     Page 1 - 1


				; TicTacToe
				; by Alex Johnson
				; September 2, 2017

				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				    
 00000000			.data
 00000000 20 31 20 20 20	board BYTE " 1      |2      |3      ",10,13,
	   20 20 20 7C 32
	   20 20 20 20 20
	   20 7C 33 20 20
	   20 20 20 20 0A
	   0D 20 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   0A 0D 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 0A 0D 20 2D
	   2D 2D 2D 2D 2D
	   2D 2B 2D 2D 2D
	   2D 2D 2D 2D 2B
	   2D 2D 2D 2D 2D
	   2D 2D 0A 0D 20
	   34 20 20 20 20
	   20 20 7C 35 20
	   20 20 20 20 20
	   7C 36 20 20 20
	   20 20 20 0A 0D
	   20 20 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 20 20 20 0A
	   0D 20 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   0A 0D 20 2D 2D
	   2D 2D 2D 2D 2D
	   2B 2D 2D 2D 2D
	   2D 2D 2D 2B 2D
	   2D 2D 2D 2D 2D
	   2D 0A 0D 20 37
	   20 20 20 20 20
	   20 7C 38 20 20
	   20 20 20 20 7C
	   39 20 20 20 20
	   20 20 0A 0D 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 0A 0D
	   20 20 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 20 20 20 0A
	   0D 00
				           "        |       |       ",10,13,
				           "        |       |       ",10,13,
				           " -------+-------+-------",10,13, 
				           " 4      |5      |6      ",10,13,
				           "        |       |       ",10,13,
				           "        |       |       ",10,13,
				           " -------+-------+-------",10,13,
				           " 7      |8      |9      ",10,13, 
				           "        |       |       ",10,13,
				           "        |       |       ",10,13,0
 0000011F 58			currentPlayer  BYTE 'X'
 00000120 00000000		choice         DWORD ?
 00000124 00000000		winner         DWORD 0
 00000128 00000000		playerXwins    DWORD 0
 0000012C 00000000		playerOwins    DWORD 0
 00000130 00000000		catsCount      DWORD 0
 00000134  00000002 [		playAgainIn    BYTE 2 DUP (?)
	    00
	   ]
 00000136 57 65 6C 63 6F	sIntro         BYTE "Welcome to TicTacToessembly!",0
	   6D 65 20 74 6F
	   20 54 69 63 54
	   61 63 54 6F 65
	   73 73 65 6D 62
	   6C 79 21 00
 00000153 50 6C 61 79 20	sPlayAgain     BYTE "Play again (y/n)? ",0
	   61 67 61 69 6E
	   20 28 79 2F 6E
	   29 3F 20 00
 00000166 54 68 61 6E 6B	sOutro         BYTE "Thanks for playing!",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00
 0000017A 27 73 20 74 75	sTurn          BYTE "'s turn. Choose a square: ",0
	   72 6E 2E 20 43
	   68 6F 6F 73 65
	   20 61 20 73 71
	   75 61 72 65 3A
	   20 00
 00000195 49 6E 76 61 6C	sInvalidChoice BYTE "Invalid choice. Choose a square: ",0
	   69 64 20 63 68
	   6F 69 63 65 2E
	   20 43 68 6F 6F
	   73 65 20 61 20
	   73 71 75 61 72
	   65 3A 20 00
 000001B7 43 61 74 73 21	sCats          BYTE "Cats!",0
	   00
 000001BD 20 77 69 6E 73	sWins          BYTE " wins!",0
	   21 00
 000001C4 20 77 69 6E 73	sWinCount      BYTE " wins: ",0
	   3A 20 00
 000001CC 43 61 74 73 3A	sCatsCount     Byte "Cats: ",0
	   20 00

 00000000			.code
				printIntro     PROTO
				clearBoard     PROTO
				printBoard     PROTO
				chooseSquare   PROTO
				checkWinner    PROTO
				processWinner  PROTO
				processCats    PROTO
				switchPlayer   PROTO
				printOutro     PROTO

 00000000			main PROC
				     ; print intro
 00000000  E8 000000CB		     call printIntro

 00000005			Play:  
				     ; clear board
 00000005  68 00000000 R	     push OFFSET board
 0000000A  E8 000000D6		     call clearBoard
				     
				     ; print starting board
 0000000F  68 00000000 R	     push OFFSET board
 00000014  E8 00000107		     call printBoard

				     ; prompt for choices until game is won
 00000019			L1:   
				     ; prompt player to choose square
 00000019  A0 0000011F R	     mov al,currentPlayer          ; move currentPlayer (X or O) into al
 0000001E  50			     push eax                      ; push currentPlayer (in al) to stack
 0000001F  68 00000000 R	     push OFFSET board             ; push address of board to stack
 00000024  E8 00000108		     call chooseSquare
				     
				     ; print board after move
 00000029  68 00000000 R	     push OFFSET board
 0000002E  E8 000000ED		     call printBoard

				     ; check if game over    
 00000033  68 00000124 R	     push OFFSET winner            ; push address of winner to stack
 00000038  A0 0000011F R	     mov al,currentPlayer          ; move currentPlayer (X or O) into al
 0000003D  50			     push eax                      ; push currentPlayer (in al) to stack
 0000003E  68 00000000 R	     push OFFSET board             ; push address of board to stack
 00000043  E8 0000027B		     call checkWinner
 00000048  A1 00000124 R	     mov eax,winner
 0000004D  83 F8 01		     cmp eax,1                     ; if winner/eax is 1, game is over
 00000050  74 11		     je Win
 00000052  83 F8 02		     cmp eax,2
 00000055  74 28		     je Cats

				     ; switch to other player
 00000057  68 0000011F R	     push OFFSET currentPlayer     ; push address of currentPlayer to stack
 0000005C  E8 000004CA		     call switchPlayer
 00000061  EB B6		     jmp L1

 00000063			Win:
 00000063  68 00000130 R	     push OFFSET catsCount
 00000068  68 0000012C R	     push OFFSET playerOwins
 0000006D  68 00000128 R	     push OFFSET playerXwins
 00000072  A0 0000011F R	     mov al,currentPlayer          ; move currentPlayer (X or O) into al
 00000077  50			     push eax                      ; push currentPlayer (in al) to stack
 00000078  E8 0000039E		     call processWinner
 0000007D  EB 16		     jmp PlayAgain

 0000007F			Cats:
 0000007F  68 00000130 R	     push OFFSET catsCount
 00000084  68 0000012C R	     push OFFSET playerOwins
 00000089  68 00000128 R	     push OFFSET playerXwins
 0000008E  E8 0000041D		     call processCats
 00000093  EB 00		     jmp PlayAgain
				     
 00000095			PlayAgain:
				     ; prompt for another game
 00000095  BA 00000153 R	     mov edx,OFFSET sPlayAgain
 0000009A  E8 00000000 E	     call WriteString
 0000009F  BA 00000134 R	     mov edx,OFFSET playAgainIn
 000000A4  B9 00000002		     mov ecx,2
 000000A9  E8 00000000 E	     call ReadString
 000000AE  A0 00000134 R	     mov al,playAgainIn
 000000B3  3C 79		     cmp al,'y'
 000000B5  0F 84 FFFFFF4A	     je Play
 000000BB  3C 6E		     cmp al,'n'
 000000BD  74 00		     je Finish
				     
 000000BF			Finish: 
				     ; print outro
 000000BF  E8 00000491		     call printOutro
				     
				     ; pause before closing window
 000000C4  E8 00000000 E	     call WaitMsg
					
				     exit
 000000C9  6A 00	   *	    push   +000000000h
 000000CB  E8 00000000 E   *	    call   ExitProcess
 000000D0			main ENDP

				; Prints intro.
				;    Receives: nothing
				;    Returns:  nothing
 000000D0			printIntro PROC
 000000D0  BA 00000136 R	     mov edx,OFFSET sIntro
 000000D5  E8 00000000 E	     call WriteString
 000000DA  E8 00000000 E	     call Crlf
 000000DF  E8 00000000 E	     call Crlf
 000000E4  C3			     ret
 000000E5			printIntro ENDP

				; Clears board.
				;    Receives: [ebp + 8] = address of board
				;    Returns:  nothing
 000000E5			clearBoard PROC
				    ; prepare stack frame
 000000E5  55			     push ebp
 000000E6  8B EC		     mov  ebp,esp
 000000E8  60			     pushad

				     ; clear board squares
 000000E9  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000000EC  B3 20		     mov bl,' '
 000000EE  88 5E 1E		     mov [esi + 30],bl
 000000F1  88 5E 26		     mov [esi + 38],bl
 000000F4  88 5E 2E		     mov [esi + 46],bl
 000000F7  88 9E 00000086	     mov [esi + 134],bl
 000000FD  88 9E 0000008E	     mov [esi + 142],bl
 00000103  88 9E 00000096	     mov [esi + 150],bl
 00000109  88 9E 000000EE	     mov [esi + 238],bl
 0000010F  88 9E 000000F6	     mov [esi + 246],bl
 00000115  88 9E 000000FE	     mov [esi + 254],bl

				     ; clean up stack frame
 0000011B  61			     popad
 0000011C  5D			     pop  ebp
 0000011D  C2 0004		     ret  4
 00000120			clearBoard ENDP

				; Prints board.
				;    Receives: [ebp + 8] = address of board
				;    Returns:  nothing
 00000120			printBoard PROC
				    ; prepare stack frame
 00000120  55			     push ebp
 00000121  8B EC		     mov  ebp,esp
 00000123  60			     pushad

				     ; print board
 00000124  8B 55 08		     mov edx,[ebp + 8]
 00000127  E8 00000000 E	     call WriteString

				     ; clean up stack frame
 0000012C  61			     popad
 0000012D  5D			     pop  ebp
 0000012E  C2 0004		     ret  4
 00000131			printBoard ENDP

				; Prompts player to choose a location on board to place an X. Validates input and
				; will only accept a number between 1 and 9. Cells to place at are as follows:
				; 1 = 30, 2 = 38, 3 = 46, 4 = 134, 5 = 142, 6 = 150, 7 = 238, 8 = 246, 9 = 254
				;    Receives: [ebp +  8] = address of board
				;              [ebp + 12] = currentPlayer
				;    Returns:  nothing
 00000131			chooseSquare PROC
				    ; prepare stack frame
 00000131  55			     push ebp
 00000132  8B EC		     mov  ebp,esp
 00000134  60			     pushad

				     ; loop until choice entered
 00000135  8B 45 0C		     mov  eax,[ebp + 12]
 00000138  E8 00000000 E	     call WriteChar
 0000013D  BA 0000017A R	     mov edx,OFFSET sTurn
 00000142  E8 00000000 E	     call WriteString

 00000147			Validate:
 00000147  E8 00000000 E	     call ReadDec
 0000014C  A3 00000120 R	     mov  choice,eax
 00000151  83 3D 00000120 R	     cmp  choice,9
	   09
 00000158  0F 87 00000151	     ja   Invalid             ; value for terms too high, jump to Invalid
 0000015E  83 3D 00000120 R	     cmp  choice,1
	   01
 00000165  0F 82 00000144	     jb   Invalid             ; value for terms too low, jump to Invalid
 0000016B  83 3D 00000120 R	     cmp choice,1                         
	   01
 00000172  74 69		     je Place1                ; place at cell 1
 00000174  83 3D 00000120 R	     cmp choice,2                         
	   02
 0000017B  74 7A		     je Place2                ; place at cell 2
 0000017D  83 3D 00000120 R	     cmp choice,3                         
	   03
 00000184  0F 84 00000087	     je Place3                ; place at cell 3
 0000018A  83 3D 00000120 R	     cmp choice,4                         
	   04
 00000191  0F 84 00000094	     je Place4                ; place at cell 4
 00000197  83 3D 00000120 R	     cmp choice,5                         
	   05
 0000019E  0F 84 0000009D	     je Place5                ; place at cell 5
 000001A4  83 3D 00000120 R	     cmp choice,6                         
	   06
 000001AB  0F 84 000000A6	     je Place6                ; place at cell 6
 000001B1  83 3D 00000120 R	     cmp choice,7                         
	   07
 000001B8  0F 84 000000AF	     je Place7                ; place at cell 7
 000001BE  83 3D 00000120 R	     cmp choice,8                         
	   08
 000001C5  0F 84 000000B8	     je Place8                ; place at cell 8
 000001CB  83 3D 00000120 R	     cmp choice,9                         
	   09
 000001D2  0F 84 000000C1	     je Place9                ; place at cell 9
 000001D8  E9 000000E1		     jmp  Finish

 000001DD			Place1:
 000001DD  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000001E0  83 C6 1E		     add esi,30               ; increment esi to correct cell
 000001E3  B3 20		     mov bl,' '
 000001E5  38 1E		     cmp [esi],bl             ; check if cell is empty
 000001E7  0F 85 000000C2	     jne Invalid              ; jump if cell is not empty
 000001ED  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 000001F0  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 000001F2  E9 000000C7		     jmp Finish

 000001F7			Place2:
 000001F7  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000001FA  83 C6 26		     add esi,38               ; increment esi to correct cell
 000001FD  B3 20		     mov bl,' '
 000001FF  38 1E		     cmp [esi],bl             ; check if cell is empty
 00000201  0F 85 000000A8	     jne Invalid              ; jump if cell is not empty
 00000207  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 0000020A  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 0000020C  E9 000000AD		     jmp Finish

 00000211			Place3:
 00000211  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000214  83 C6 2E		     add esi,46               ; increment esi to correct cell
 00000217  B3 20		     mov bl,' '
 00000219  38 1E		     cmp [esi],bl             ; check if cell is empty
 0000021B  0F 85 0000008E	     jne Invalid              ; jump if cell is not empty
 00000221  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 00000224  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 00000226  E9 00000093		     jmp Finish

 0000022B			Place4:
 0000022B  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 0000022E  81 C6 00000086	     add esi,134              ; increment esi to correct cell
 00000234  B3 20		     mov bl,' '
 00000236  38 1E		     cmp [esi],bl             ; check if cell is empty
 00000238  75 75		     jne Invalid              ; jump if cell is not empty
 0000023A  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 0000023D  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 0000023F  EB 7D		     jmp Finish

 00000241			Place5:
 00000241  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000244  81 C6 0000008E	     add esi,142              ; increment esi to correct cell
 0000024A  B3 20		     mov bl,' '
 0000024C  38 1E		     cmp [esi],bl             ; check if cell is empty
 0000024E  75 5F		     jne Invalid              ; jump if cell is not empty
 00000250  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 00000253  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 00000255  EB 67		     jmp Finish

 00000257			Place6:
 00000257  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 0000025A  81 C6 00000096	     add esi,150              ; increment esi to correct cell
 00000260  B3 20		     mov bl,' '
 00000262  38 1E		     cmp [esi],bl             ; check if cell is empty
 00000264  75 49		     jne Invalid              ; jump if cell is not empty
 00000266  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 00000269  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 0000026B  EB 51		     jmp Finish

 0000026D			Place7:
 0000026D  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000270  81 C6 000000EE	     add esi,238              ; increment esi to correct cell
 00000276  B3 20		     mov bl,' '
 00000278  38 1E		     cmp [esi],bl             ; check if cell is empty
 0000027A  75 33		     jne Invalid              ; jump if cell is not empty
 0000027C  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 0000027F  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 00000281  EB 3B		     jmp Finish

 00000283			Place8:
 00000283  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000286  81 C6 000000F6	     add esi,246              ; increment esi to correct cell
 0000028C  B3 20		     mov bl,' '
 0000028E  38 1E		     cmp [esi],bl             ; check if cell is empty
 00000290  75 1D		     jne Invalid              ; jump if cell is not empty
 00000292  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 00000295  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 00000297  EB 25		     jmp Finish

 00000299			Place9:
 00000299  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 0000029C  81 C6 000000FE	     add esi,254              ; increment esi to correct cell
 000002A2  B3 20		     mov bl,' '
 000002A4  38 1E		     cmp [esi],bl             ; check if cell is empty
 000002A6  75 07		     jne Invalid              ; jump if cell is not empty
 000002A8  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 000002AB  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 000002AD  EB 0F		     jmp Finish

 000002AF			Invalid:
 000002AF  BA 00000195 R	     mov  edx,OFFSET sInvalidChoice
 000002B4  E8 00000000 E	     call WriteString
 000002B9  E9 FFFFFE89		     jmp  Validate

 000002BE			Finish:
				     ; clean up stack frame
 000002BE  61			     popad
 000002BF  5D			     pop  ebp
 000002C0  C2 0008		     ret 8
 000002C3			chooseSquare ENDP

				; Checks to see if either player has won by looking for runs of 3 X's or O's, depending
				; on whether the most recent move was made by X or O. This is done by looking at 
				; particular cell in the board array. For example, a run in the first row would mean
				; that cell 30, 38, and 46 would all be either X or O.
				;    Receives: [ebp +  8] = address of board  
				;              [ebp + 12] = currentPlayer
				;              [ebp + 16] = winner
				;    Returns:  0 in winner if no winner found, 1 if winner found, 2 if cats
 000002C3			checkWinner PROC
				    ; prepare stack frame
 000002C3  55			     push ebp
 000002C4  8B EC		     mov  ebp,esp
 000002C6  60			     pushad

 000002C7  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 000002CA  8B 7D 10		     mov edi,[ebp + 16]       ; store address of winner in edi

 000002CD			CheckRow1:
 000002CD  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000002D0  83 C6 1E		     add esi,30               ; increment esi to correct cell
 000002D3  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000002D5  75 13		     jne CheckRow2            ; no winner here, so check next row, column, or diagonal
 000002D7  83 C6 08		     add esi,8                ; increment esi to next cell
 000002DA  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000002DC  75 0C		     jne CheckRow2            ; no winner here, so check next row, column, or diagonal
 000002DE  83 C6 08		     add esi,8                ; increment esi to next cell
 000002E1  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000002E3  75 05		     jne CheckRow2            ; no winner here, so check next row, column, or diagonal
 000002E5  E9 0000011A		     jmp WinnerFound          ; if we've made it this far then we have a winner

 000002EA			CheckRow2:
 000002EA  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000002ED  81 C6 00000086	     add esi,134              ; increment esi to correct cell
 000002F3  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000002F5  75 13		     jne CheckRow3            ; no winner here, so check next row, column, or diagonal
 000002F7  83 C6 08		     add esi,8                ; increment esi to next cell
 000002FA  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000002FC  75 0C		     jne CheckRow3            ; no winner here, so check next row, column, or diagonal
 000002FE  83 C6 08		     add esi,8                ; increment esi to next cell
 00000301  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000303  75 05		     jne CheckRow3            ; no winner here, so check next row, column, or diagonal
 00000305  E9 000000FA		     jmp WinnerFound          ; if we've made it this far then we have a winner

 0000030A			CheckRow3:
 0000030A  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 0000030D  81 C6 000000EE	     add esi,238              ; increment esi to correct cell
 00000313  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000315  75 13		     jne CheckColumn1         ; no winner here, so check next row, column, or diagonal
 00000317  83 C6 08		     add esi,8                ; increment esi to next cell
 0000031A  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 0000031C  75 0C		     jne CheckColumn1         ; no winner here, so check next row, column, or diagonal
 0000031E  83 C6 08		     add esi,8                ; increment esi to next cell
 00000321  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000323  75 05		     jne CheckColumn1         ; no winner here, so check next row, column, or diagonal
 00000325  E9 000000DA		     jmp WinnerFound          ; if we've made it this far then we have a winner

 0000032A			CheckColumn1:
 0000032A  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 0000032D  83 C6 1E		     add esi,30               ; increment esi to correct cell
 00000330  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000332  75 13		     jne CheckColumn2         ; no winner here, so check next row, column, or diagonal
 00000334  83 C6 68		     add esi,104              ; increment esi to next cell
 00000337  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000339  75 0C		     jne CheckColumn2         ; no winner here, so check next row, column, or diagonal
 0000033B  83 C6 68		     add esi,104              ; increment esi to next cell
 0000033E  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000340  75 05		     jne CheckColumn2         ; no winner here, so check next row, column, or diagonal
 00000342  E9 000000BD		     jmp WinnerFound          ; if we've made it this far then we have a winner

 00000347			CheckColumn2:
 00000347  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 0000034A  83 C6 26		     add esi,38               ; increment esi to correct cell
 0000034D  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 0000034F  75 13		     jne CheckColumn3         ; no winner here, so check next row, column, or diagonal
 00000351  83 C6 68		     add esi,104              ; increment esi to next cell
 00000354  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000356  75 0C		     jne CheckColumn3         ; no winner here, so check next row, column, or diagonal
 00000358  83 C6 68		     add esi,104              ; increment esi to next cell
 0000035B  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 0000035D  75 05		     jne CheckColumn3         ; no winner here, so check next row, column, or diagonal
 0000035F  E9 000000A0		     jmp WinnerFound          ; if we've made it this far then we have a winner

 00000364			CheckColumn3:
 00000364  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000367  83 C6 2E		     add esi,46               ; increment esi to correct cell
 0000036A  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 0000036C  75 13		     jne CheckDiagonal1       ; no winner here, so check next row, column, or diagonal
 0000036E  83 C6 68		     add esi,104              ; increment esi to next cell
 00000371  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000373  75 0C		     jne CheckDiagonal1       ; no winner here, so check next row, column, or diagonal
 00000375  83 C6 68		     add esi,104              ; increment esi to next cell
 00000378  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 0000037A  75 05		     jne CheckDiagonal1       ; no winner here, so check next row, column, or diagonal
 0000037C  E9 00000083		     jmp WinnerFound          ; if we've made it this far then we have a winner

 00000381			CheckDiagonal1:
 00000381  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000384  83 C6 1E		     add esi,30               ; increment esi to correct cell
 00000387  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000389  75 10		     jne CheckDiagonal2       ; no winner here, so check next row, column, or diagonal
 0000038B  83 C6 70		     add esi,112              ; increment esi to next cell
 0000038E  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000390  75 09		     jne CheckDiagonal2       ; no winner here, so check next row, column, or diagonal
 00000392  83 C6 70		     add esi,112              ; increment esi to next cell
 00000395  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000397  75 02		     jne CheckDiagonal2       ; no winner here, so check next row, column, or diagonal
 00000399  EB 69		     jmp WinnerFound          ; if we've made it this far then we have a winner

 0000039B			CheckDiagonal2:
 0000039B  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 0000039E  83 C6 2E		     add esi,46               ; increment esi to correct cell
 000003A1  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000003A3  75 10		     jne CheckCats            ; no winner here, so no winner at all
 000003A5  83 C6 60		     add esi,96               ; increment esi to next cell
 000003A8  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000003AA  75 09		     jne CheckCats            ; no winner here, so no winner at all
 000003AC  83 C6 60		     add esi,96               ; increment esi to next cell
 000003AF  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000003B1  75 02		     jne CheckCats            ; no winner here, so no winner at all
 000003B3  EB 4F		     jmp WinnerFound          ; if we've made it this far then we have a winner

 000003B5			CheckCats:
 000003B5  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000003B8  B3 20		     mov bl,' '
 000003BA  38 5E 1E		     cmp [esi + 30],bl        ; check if cell is empty
 000003BD  74 3C		     je NoWinnerFound         ; cell is empty, so can't be cats
 000003BF  38 5E 26		     cmp [esi + 38],bl
 000003C2  74 37		     je NoWinnerFound
 000003C4  38 5E 2E		     cmp [esi + 46],bl
 000003C7  74 32		     je NoWinnerFound
 000003C9  38 9E 00000086	     cmp [esi + 134],bl
 000003CF  74 2A		     je NoWinnerFound
 000003D1  38 9E 0000008E	     cmp [esi + 142],bl
 000003D7  74 22		     je NoWinnerFound
 000003D9  38 9E 00000096	     cmp [esi + 150],bl
 000003DF  74 1A		     je NoWinnerFound
 000003E1  38 9E 000000EE	     cmp [esi + 238],bl
 000003E7  74 12		     je NoWinnerFound
 000003E9  38 9E 000000F6	     cmp [esi + 246],bl
 000003EF  74 0A		     je NoWinnerFound
 000003F1  38 9E 000000FE	     cmp [esi + 254],bl
 000003F7  74 02		     je NoWinnerFound
 000003F9  EB 12		     jmp CatsFound

 000003FB			NoWinnerFound:
 000003FB  BA 00000000		     mov edx,0
 00000400  89 17		     mov [edi],edx
 00000402  EB 12		     jmp Finish

 00000404			WinnerFound:
 00000404  BA 00000001		     mov edx,1
 00000409  89 17		     mov [edi],edx
 0000040B  EB 09		     jmp Finish

 0000040D			CatsFound:
 0000040D  BA 00000002		     mov edx,2
 00000412  89 17		     mov [edi],edx
 00000414  EB 00		     jmp Finish

 00000416			Finish:
				     ; clean up stack frame
 00000416  61			     popad
 00000417  5D			     pop  ebp
 00000418  C2 000C		     ret 12
 0000041B			checkWinner ENDP

				; Prints winner and increments that player's score.
				;    Receives: [ebp +  8] = currentPlayer
				;              [ebp + 12] = address of playerXwins
				;              [ebp + 16] = address of playerOwins
				;              [ebp + 20] = address of catsCount
				;    Returns:  nothing
 0000041B			processWinner PROC
				    ; prepare stack frame
 0000041B  55			     push ebp
 0000041C  8B EC		     mov  ebp,esp
 0000041E  60			     pushad

				     ; process arguments
 0000041F  8B 45 08		     mov eax,[ebp + 8]
 00000422  8B 75 0C		     mov esi,[ebp + 12]            ; move address of playerXwins into esi
 00000425  8B 7D 10		     mov edi,[ebp + 16]            ; move address of playerOwins into edi

				     ; print winner
 00000428  E8 00000000 E	     call WriteChar
 0000042D  BA 000001BD R	     mov edx,OFFSET sWins
 00000432  E8 00000000 E	     call WriteString
 00000437  E8 00000000 E	     call Crlf

				     ; increment wins
 0000043C  3C 58		     cmp al,'X'
 0000043E  74 04		     je IncrementXwins
 00000440  3C 4F		     cmp al,'O'
 00000442  74 07		     je IncrementOwins

 00000444			IncrementXwins:
 00000444  8B 1E		     mov ebx,[esi]
 00000446  43			     inc ebx
 00000447  89 1E		     mov [esi],ebx
 00000449  EB 07		     jmp PrintScores

 0000044B			IncrementOwins:
 0000044B  8B 1F		     mov ebx,[edi]
 0000044D  43			     inc ebx
 0000044E  89 1F		     mov [edi],ebx
 00000450  EB 00		     jmp PrintScores

				     ; print scores
 00000452			PrintScores:
 00000452  8B 75 0C		     mov esi,[ebp + 12]             ; move address of playerXwins into esi
 00000455  B0 58		     mov al,'X'
 00000457  E8 00000000 E	     call WriteChar
 0000045C  BA 000001C4 R	     mov edx,OFFSET sWinCount
 00000461  E8 00000000 E	     call WriteString
 00000466  8B 06		     mov eax,[esi]
 00000468  E8 00000000 E	     call WriteDec
 0000046D  E8 00000000 E	     call Crlf

 00000472  8B 75 10		     mov esi,[ebp + 16]            ; move address of playerOwins into esi
 00000475  B0 4F		     mov al,'O'
 00000477  E8 00000000 E	     call WriteChar
 0000047C  BA 000001C4 R	     mov edx,OFFSET sWinCount
 00000481  E8 00000000 E	     call WriteString
 00000486  8B 06		     mov eax,[esi]
 00000488  E8 00000000 E	     call WriteDec
 0000048D  E8 00000000 E	     call Crlf

 00000492  8B 75 14		     mov esi,[ebp + 20]            ; move address of catsCount into esi
 00000495  BA 000001CC R	     mov edx,OFFSET sCatsCount
 0000049A  E8 00000000 E	     call WriteString
 0000049F  8B 06		     mov eax,[esi]
 000004A1  E8 00000000 E	     call WriteDec
 000004A6  E8 00000000 E	     call Crlf

				     ; clean up stack frame
 000004AB  61			     popad
 000004AC  5D			     pop  ebp
 000004AD  C2 0010		     ret 16
 000004B0			processWinner ENDP

				; Prints cats and increments catsCount.
				;    Receives: [ebp +  8] = address of playerXwins
				;              [ebp + 12] = address of playerOwins
				;              [ebp + 16] = address of catsCount
				;    Returns:  nothing
 000004B0			processCats PROC
				    ; prepare stack frame
 000004B0  55			     push ebp
 000004B1  8B EC		     mov  ebp,esp
 000004B3  60			     pushad

				     ; print cats!
 000004B4  BA 000001B7 R	     mov edx,OFFSET sCats
 000004B9  E8 00000000 E	     call WriteString
 000004BE  E8 00000000 E	     call Crlf

				     ; increment cats
 000004C3			IncrementCats:
 000004C3  8B 75 10		     mov esi,[ebp + 16]            ; move address of catsCount into esi
 000004C6  8B 1E		     mov ebx,[esi]
 000004C8  43			     inc ebx
 000004C9  89 1E		     mov [esi],ebx
 000004CB  EB 00		     jmp PrintScores

				     ; print scores
 000004CD			PrintScores:
 000004CD  8B 75 08		     mov esi,[ebp + 8]             ; move address of playerXwins into esi
 000004D0  B0 58		     mov al,'X'
 000004D2  E8 00000000 E	     call WriteChar
 000004D7  BA 000001C4 R	     mov edx,OFFSET sWinCount
 000004DC  E8 00000000 E	     call WriteString
 000004E1  8B 06		     mov eax,[esi]
 000004E3  E8 00000000 E	     call WriteDec
 000004E8  E8 00000000 E	     call Crlf

 000004ED  8B 75 0C		     mov esi,[ebp + 12]            ; move address of playerOwins into esi
 000004F0  B0 4F		     mov al,'O'
 000004F2  E8 00000000 E	     call WriteChar
 000004F7  BA 000001C4 R	     mov edx,OFFSET sWinCount
 000004FC  E8 00000000 E	     call WriteString
 00000501  8B 06		     mov eax,[esi]
 00000503  E8 00000000 E	     call WriteDec
 00000508  E8 00000000 E	     call Crlf

 0000050D  8B 75 10		     mov esi,[ebp + 16]            ; move address of catsCount into esi
 00000510  BA 000001CC R	     mov edx,OFFSET sCatsCount
 00000515  E8 00000000 E	     call WriteString
 0000051A  8B 06		     mov eax,[esi]
 0000051C  E8 00000000 E	     call WriteDec
 00000521  E8 00000000 E	     call Crlf

				     ; clean up stack frame
 00000526  61			     popad
 00000527  5D			     pop  ebp
 00000528  C2 000C		     ret 12
 0000052B			processCats ENDP

				; Checks to see if either player has won by looking for runs of 3 X's or O's. This is
				; done by looking at particular cells in the board array. For example, a run in the
				; first row would mean that cells 30, 38, and 46 would all be either X or O. If winner
				;    Receives: [ebp + 8] = address of currentPlayer  
				;    Returns:  0 in EAX if no winner found, 1 in EAX if winner found
 0000052B			switchPlayer PROC
				    ; prepare stack frame
 0000052B  55			     push ebp
 0000052C  8B EC		     mov  ebp,esp
 0000052E  60			     pushad

				     ; get currentPlayer char
 0000052F  8B 75 08		     mov esi,[ebp + 8]        ; move address of currentPlayer into esi
 00000532  8B 1E		     mov ebx,[esi]            ; move character pointed to by eax to ebx

				     ; prepare registers for comparison
 00000534  B9 00000058		     mov ecx,'X'
 00000539  BA 0000004F		     mov edx,'O'

				     ; compare 
 0000053E  3A D9		     cmp bl,cl                ; currentPlayer is X so switch to O
 00000540  74 04		     je XtoO
 00000542  3A DA		     cmp bl,dl                ; currentPlayer is O so switch to X
 00000544  74 04		     je OtoX

				     ; swap currentPlayer
 00000546			XtoO:
 00000546  8A DA		     mov bl,dl
 00000548  EB 04		     jmp Finish
 0000054A			OtoX:
 0000054A  8A D9		     mov bl,cl
 0000054C  EB 00		     jmp Finish
				     
 0000054E			Finish:
				     ; move back into currentPlayer via address in esi
 0000054E  88 1E		     mov [esi],bl

				     ; clean up stack frame
 00000550  61			     popad
 00000551  5D			     pop  ebp
 00000552  C2 0004		     ret 4
 00000555			switchPlayer ENDP

				; Prints outro.
				;    Receives: nothing
				;    Returns:  nothing
 00000555			printOutro PROC
				    ; prepare stack frame
 00000555  55			     push ebp
 00000556  8B EC		     mov  ebp,esp
 00000558  60			     pushad

				     ; procedure code here
 00000559  BA 00000166 R	     mov edx,OFFSET sOutro
 0000055E  E8 00000000 E	     call WriteString
 00000563  E8 00000000 E	     call Crlf

				     ; clean up stack frame
 00000568  61			     popad
 00000569  5D			     pop  ebp
 0000056A  C3			     ret
 0000056B			printOutro ENDP

				END main
Microsoft (R) Macro Assembler Version 14.10.25019.0	    09/02/17 20:28:42
TicTacToe.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001D3 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000056B Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkWinner  . . . . . . . . . .	P Near	 000002C3 _TEXT	Length= 00000158 Public STDCALL
  CheckRow1  . . . . . . . . . .	L Near	 000002CD _TEXT	
  CheckRow2  . . . . . . . . . .	L Near	 000002EA _TEXT	
  CheckRow3  . . . . . . . . . .	L Near	 0000030A _TEXT	
  CheckColumn1 . . . . . . . . .	L Near	 0000032A _TEXT	
  CheckColumn2 . . . . . . . . .	L Near	 00000347 _TEXT	
  CheckColumn3 . . . . . . . . .	L Near	 00000364 _TEXT	
  CheckDiagonal1 . . . . . . . .	L Near	 00000381 _TEXT	
  CheckDiagonal2 . . . . . . . .	L Near	 0000039B _TEXT	
  CheckCats  . . . . . . . . . .	L Near	 000003B5 _TEXT	
  NoWinnerFound  . . . . . . . .	L Near	 000003FB _TEXT	
  WinnerFound  . . . . . . . . .	L Near	 00000404 _TEXT	
  CatsFound  . . . . . . . . . .	L Near	 0000040D _TEXT	
  Finish . . . . . . . . . . . .	L Near	 00000416 _TEXT	
chooseSquare . . . . . . . . . .	P Near	 00000131 _TEXT	Length= 00000192 Public STDCALL
  Validate . . . . . . . . . . .	L Near	 00000147 _TEXT	
  Place1 . . . . . . . . . . . .	L Near	 000001DD _TEXT	
  Place2 . . . . . . . . . . . .	L Near	 000001F7 _TEXT	
  Place3 . . . . . . . . . . . .	L Near	 00000211 _TEXT	
  Place4 . . . . . . . . . . . .	L Near	 0000022B _TEXT	
  Place5 . . . . . . . . . . . .	L Near	 00000241 _TEXT	
  Place6 . . . . . . . . . . . .	L Near	 00000257 _TEXT	
  Place7 . . . . . . . . . . . .	L Near	 0000026D _TEXT	
  Place8 . . . . . . . . . . . .	L Near	 00000283 _TEXT	
  Place9 . . . . . . . . . . . .	L Near	 00000299 _TEXT	
  Invalid  . . . . . . . . . . .	L Near	 000002AF _TEXT	
  Finish . . . . . . . . . . . .	L Near	 000002BE _TEXT	
clearBoard . . . . . . . . . . .	P Near	 000000E5 _TEXT	Length= 0000003B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000D0 Public STDCALL
  Play . . . . . . . . . . . . .	L Near	 00000005 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000019 _TEXT	
  Win  . . . . . . . . . . . . .	L Near	 00000063 _TEXT	
  Cats . . . . . . . . . . . . .	L Near	 0000007F _TEXT	
  PlayAgain  . . . . . . . . . .	L Near	 00000095 _TEXT	
  Finish . . . . . . . . . . . .	L Near	 000000BF _TEXT	
printBoard . . . . . . . . . . .	P Near	 00000120 _TEXT	Length= 00000011 Public STDCALL
printIntro . . . . . . . . . . .	P Near	 000000D0 _TEXT	Length= 00000015 Public STDCALL
printOutro . . . . . . . . . . .	P Near	 00000555 _TEXT	Length= 00000016 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
processCats  . . . . . . . . . .	P Near	 000004B0 _TEXT	Length= 0000007B Public STDCALL
  IncrementCats  . . . . . . . .	L Near	 000004C3 _TEXT	
  PrintScores  . . . . . . . . .	L Near	 000004CD _TEXT	
processWinner  . . . . . . . . .	P Near	 0000041B _TEXT	Length= 00000095 Public STDCALL
  IncrementXwins . . . . . . . .	L Near	 00000444 _TEXT	
  IncrementOwins . . . . . . . .	L Near	 0000044B _TEXT	
  PrintScores  . . . . . . . . .	L Near	 00000452 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
switchPlayer . . . . . . . . . .	P Near	 0000052B _TEXT	Length= 0000002A Public STDCALL
  XtoO . . . . . . . . . . . . .	L Near	 00000546 _TEXT	
  OtoX . . . . . . . . . . . . .	L Near	 0000054A _TEXT	
  Finish . . . . . . . . . . . .	L Near	 0000054E _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
board  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
catsCount  . . . . . . . . . . .	DWord	 00000130 _DATA	
choice . . . . . . . . . . . . .	DWord	 00000120 _DATA	
currentPlayer  . . . . . . . . .	Byte	 0000011F _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
playAgainIn  . . . . . . . . . .	Byte	 00000134 _DATA	
playerOwins  . . . . . . . . . .	DWord	 0000012C _DATA	
playerXwins  . . . . . . . . . .	DWord	 00000128 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sCatsCount . . . . . . . . . . .	Byte	 000001CC _DATA	
sCats  . . . . . . . . . . . . .	Byte	 000001B7 _DATA	
sIntro . . . . . . . . . . . . .	Byte	 00000136 _DATA	
sInvalidChoice . . . . . . . . .	Byte	 00000195 _DATA	
sOutro . . . . . . . . . . . . .	Byte	 00000166 _DATA	
sPlayAgain . . . . . . . . . . .	Byte	 00000153 _DATA	
sTurn  . . . . . . . . . . . . .	Byte	 0000017A _DATA	
sWinCount  . . . . . . . . . . .	Byte	 000001C4 _DATA	
sWins  . . . . . . . . . . . . .	Byte	 000001BD _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winner . . . . . . . . . . . . .	DWord	 00000124 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
