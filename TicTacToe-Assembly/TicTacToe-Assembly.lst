Microsoft (R) Macro Assembler Version 14.10.25019.0	    09/02/17 17:59:53
TicTacToe.asm						     Page 1 - 1


				; TicTacToe

				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				    
 00000000			.data
 00000000 20 31 20 20 20	board BYTE " 1      |2      |3      ",10,13,
	   20 20 20 7C 32
	   20 20 20 20 20
	   20 7C 33 20 20
	   20 20 20 20 0A
	   0D 20 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   0A 0D 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 0A 0D 20 2D
	   2D 2D 2D 2D 2D
	   2D 2B 2D 2D 2D
	   2D 2D 2D 2D 2B
	   2D 2D 2D 2D 2D
	   2D 2D 0A 0D 20
	   34 20 20 20 20
	   20 20 7C 35 20
	   20 20 20 20 20
	   7C 36 20 20 20
	   20 20 20 0A 0D
	   20 20 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 20 20 20 0A
	   0D 20 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   0A 0D 20 2D 2D
	   2D 2D 2D 2D 2D
	   2B 2D 2D 2D 2D
	   2D 2D 2D 2B 2D
	   2D 2D 2D 2D 2D
	   2D 0A 0D 20 37
	   20 20 20 20 20
	   20 7C 38 20 20
	   20 20 20 20 7C
	   39 20 20 20 20
	   20 20 0A 0D 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 0A 0D
	   20 20 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 20 20 20 0A
	   0D 00
				           "        |       |       ",10,13,
				           "        |       |       ",10,13,
				           " -------+-------+-------",10,13, 
				           " 4      |5      |6      ",10,13,
				           "        |       |       ",10,13,
				           "        |       |       ",10,13,
				           " -------+-------+-------",10,13,
				           " 7      |8      |9      ",10,13, 
				           "        |       |       ",10,13,
				           "        |       |       ",10,13,0
 0000011F 58			currentPlayer  BYTE 'X'
 00000120 00000000		choice         DWORD ?
 00000124 00000000		winner         DWORD 0
 00000128 00000000		playerXwins    DWORD 0
 0000012C 00000000		playerOwins    DWORD 0
 00000130  00000002 [		playAgainIn    BYTE 2 DUP (?)
	    00
	   ]
 00000132 57 65 6C 63 6F	sIntro         BYTE "Welcome to TicTacToessembly!",0
	   6D 65 20 74 6F
	   20 54 69 63 54
	   61 63 54 6F 65
	   73 73 65 6D 62
	   6C 79 21 00
 0000014F 50 6C 61 79 20	sPlayAgain     BYTE "Play again (y/n)? ",0
	   61 67 61 69 6E
	   20 28 79 2F 6E
	   29 3F 20 00
 00000162 54 68 61 6E 6B	sOutro         BYTE "Thanks for playing!",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00
 00000176 27 73 20 74 75	sTurn          BYTE "'s turn. Choose a square: ",0
	   72 6E 2E 20 43
	   68 6F 6F 73 65
	   20 61 20 73 71
	   75 61 72 65 3A
	   20 00
 00000191 49 6E 76 61 6C	sInvalidChoice BYTE "Invalid choice. Choose a square: ",0
	   69 64 20 63 68
	   6F 69 63 65 2E
	   20 43 68 6F 6F
	   73 65 20 61 20
	   73 71 75 61 72
	   65 3A 20 00
 000001B3 20 77 69 6E 73	sWins          BYTE " wins!",0
	   21 00
 000001BA 20 77 69 6E 73	sWinCount      BYTE " wins: ",0
	   3A 20 00

 00000000			.code
				printIntro       PROTO
				printBoard       PROTO
				chooseSquare     PROTO
				checkWinner      PROTO
				processWinner    PROTO
				switchPlayer     PROTO
				printOutro       PROTO

 00000000			main PROC
				     ; print intro
 00000000  E8 0000009F		     call printIntro

 00000005			Play:  
				     ; print starting board
 00000005  68 00000000 R	     push OFFSET board
 0000000A  E8 000000AA		     call printBoard

				     ; prompt for choices until game is won
 0000000F			L1:   
				     ; prompt player to choose square
 0000000F  A0 0000011F R	     mov al,currentPlayer          ; move currentPlayer (X or O) into al
 00000014  50			     push eax                      ; push currentPlayer (in al) to stack
 00000015  68 00000000 R	     push OFFSET board             ; push address of board to stack
 0000001A  E8 000000AB		     call chooseSquare
				     
				     ; print board after move
 0000001F  68 00000000 R	     push OFFSET board
 00000024  E8 00000090		     call printBoard

				     ; check if game over    
 00000029  68 00000124 R	     push OFFSET winner            ; push address of winner to stack
 0000002E  A0 0000011F R	     mov al,currentPlayer          ; move currentPlayer (X or O) into al
 00000033  50			     push eax                      ; push currentPlayer (in al) to stack
 00000034  68 00000000 R	     push OFFSET board             ; push address of board to stack
 00000039  E8 0000021E		     call checkWinner
 0000003E  A1 00000124 R	     mov eax,winner
 00000043  83 F8 01		     cmp eax,1                     ; if winner/eax is 1, game is over
 00000046  74 0C		     je Win

				     ; switch to other player
 00000048  68 0000011F R	     push OFFSET currentPlayer     ; push address of currentPlayer to stack
 0000004D  E8 00000380		     call switchPlayer
 00000052  EB BB		     jmp L1

 00000054			Win:
 00000054  68 0000012C R	     push OFFSET playerOwins
 00000059  68 00000128 R	     push OFFSET playerXwins
 0000005E  A0 0000011F R	     mov al,currentPlayer          ; move currentPlayer (X or O) into al
 00000063  50			     push eax                      ; push currentPlayer (in al) to stack
 00000064  E8 000002F3		     call processWinner
				     
				     ; prompt for another game
 00000069  BA 0000014F R	     mov edx,OFFSET sPlayAgain
 0000006E  E8 00000000 E	     call WriteString
 00000073  BA 00000130 R	     mov edx,OFFSET playAgainIn
 00000078  B9 00000002		     mov ecx,2
 0000007D  E8 00000000 E	     call ReadString
 00000082  A0 00000130 R	     mov al,playAgainIn
 00000087  3C 79		     cmp al,'y'
 00000089  0F 84 FFFFFF76	     je Play
 0000008F  3C 6E		     cmp al,'n'
 00000091  74 00		     je Finish
				     
 00000093			Finish: 
				     ; print outro
 00000093  E8 00000364		     call printOutro
				     
				     ; pause before closing window
 00000098  E8 00000000 E	     call WaitMsg
					
				     exit
 0000009D  6A 00	   *	    push   +000000000h
 0000009F  E8 00000000 E   *	    call   ExitProcess
 000000A4			main ENDP

				; Prints intro.
				;    Receives: nothing
				;    Returns:  nothing
 000000A4			printIntro PROC
 000000A4  BA 00000132 R	     mov edx,OFFSET sIntro
 000000A9  E8 00000000 E	     call WriteString
 000000AE  E8 00000000 E	     call Crlf
 000000B3  E8 00000000 E	     call Crlf
 000000B8  C3			     ret
 000000B9			printIntro ENDP

				; Prints board.
				;    Receives: [ebp + 8] = address of board
				;    Returns:  nothing
 000000B9			printBoard PROC
				    ; prepare stack frame
 000000B9  55			     push ebp
 000000BA  8B EC		     mov  ebp,esp
 000000BC  60			     pushad

				     ; print board
 000000BD  8B 55 08		     mov edx,[ebp + 8]
 000000C0  E8 00000000 E	     call WriteString

				     ; clean up stack frame
 000000C5  61			     popad
 000000C6  5D			     pop  ebp
 000000C7  C2 0004		     ret  4
 000000CA			printBoard ENDP

				; Prompts player to choose a location on board to place an X. Validates input and
				; will only accept a number between 1 and 9. Cells to place at are as follows:
				; 1 = 30, 2 = 38, 3 = 46, 4 = 134, 5 = 142, 6 = 150, 7 = 238, 8 = 246, 9 = 254
				;    Receives: [ebp +  8] = address of board
				;              [ebp + 12] = currentPlayer
				;    Returns:  nothing
 000000CA			chooseSquare PROC
				    ; prepare stack frame
 000000CA  55			     push ebp
 000000CB  8B EC		     mov  ebp,esp
 000000CD  60			     pushad

				     ; loop until choice entered
 000000CE  8B 45 0C		     mov  eax,[ebp + 12]
 000000D1  E8 00000000 E	     call WriteChar
 000000D6  BA 00000176 R	     mov edx,OFFSET sTurn
 000000DB  E8 00000000 E	     call WriteString

 000000E0			Validate:
 000000E0  E8 00000000 E	     call ReadDec
 000000E5  A3 00000120 R	     mov  choice,eax
 000000EA  83 3D 00000120 R	     cmp  choice,9
	   09
 000000F1  0F 87 00000151	     ja   Invalid             ; value for terms too high, jump to Invalid
 000000F7  83 3D 00000120 R	     cmp  choice,1
	   01
 000000FE  0F 82 00000144	     jb   Invalid             ; value for terms too low, jump to Invalid
 00000104  83 3D 00000120 R	     cmp choice,1                         
	   01
 0000010B  74 69		     je Place1                ; place at cell 1
 0000010D  83 3D 00000120 R	     cmp choice,2                         
	   02
 00000114  74 7A		     je Place2                ; place at cell 2
 00000116  83 3D 00000120 R	     cmp choice,3                         
	   03
 0000011D  0F 84 00000087	     je Place3                ; place at cell 3
 00000123  83 3D 00000120 R	     cmp choice,4                         
	   04
 0000012A  0F 84 00000094	     je Place4                ; place at cell 4
 00000130  83 3D 00000120 R	     cmp choice,5                         
	   05
 00000137  0F 84 0000009D	     je Place5                ; place at cell 5
 0000013D  83 3D 00000120 R	     cmp choice,6                         
	   06
 00000144  0F 84 000000A6	     je Place6                ; place at cell 6
 0000014A  83 3D 00000120 R	     cmp choice,7                         
	   07
 00000151  0F 84 000000AF	     je Place7                ; place at cell 7
 00000157  83 3D 00000120 R	     cmp choice,8                         
	   08
 0000015E  0F 84 000000B8	     je Place8                ; place at cell 8
 00000164  83 3D 00000120 R	     cmp choice,9                         
	   09
 0000016B  0F 84 000000C1	     je Place9                ; place at cell 9
 00000171  E9 000000E1		     jmp  Finish

 00000176			Place1:
 00000176  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000179  83 C6 1E		     add esi,30               ; increment esi to correct cell
 0000017C  B3 20		     mov bl,' '
 0000017E  38 1E		     cmp [esi],bl             ; check if cell is empty
 00000180  0F 85 000000C2	     jne Invalid              ; jump if cell is not empty
 00000186  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 00000189  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 0000018B  E9 000000C7		     jmp Finish

 00000190			Place2:
 00000190  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000193  83 C6 26		     add esi,38               ; increment esi to correct cell
 00000196  B3 20		     mov bl,' '
 00000198  38 1E		     cmp [esi],bl             ; check if cell is empty
 0000019A  0F 85 000000A8	     jne Invalid              ; jump if cell is not empty
 000001A0  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 000001A3  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 000001A5  E9 000000AD		     jmp Finish

 000001AA			Place3:
 000001AA  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000001AD  83 C6 2E		     add esi,46               ; increment esi to correct cell
 000001B0  B3 20		     mov bl,' '
 000001B2  38 1E		     cmp [esi],bl             ; check if cell is empty
 000001B4  0F 85 0000008E	     jne Invalid              ; jump if cell is not empty
 000001BA  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 000001BD  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 000001BF  E9 00000093		     jmp Finish

 000001C4			Place4:
 000001C4  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000001C7  81 C6 00000086	     add esi,134              ; increment esi to correct cell
 000001CD  B3 20		     mov bl,' '
 000001CF  38 1E		     cmp [esi],bl             ; check if cell is empty
 000001D1  75 75		     jne Invalid              ; jump if cell is not empty
 000001D3  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 000001D6  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 000001D8  EB 7D		     jmp Finish

 000001DA			Place5:
 000001DA  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000001DD  81 C6 0000008E	     add esi,142              ; increment esi to correct cell
 000001E3  B3 20		     mov bl,' '
 000001E5  38 1E		     cmp [esi],bl             ; check if cell is empty
 000001E7  75 5F		     jne Invalid              ; jump if cell is not empty
 000001E9  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 000001EC  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 000001EE  EB 67		     jmp Finish

 000001F0			Place6:
 000001F0  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000001F3  81 C6 00000096	     add esi,150              ; increment esi to correct cell
 000001F9  B3 20		     mov bl,' '
 000001FB  38 1E		     cmp [esi],bl             ; check if cell is empty
 000001FD  75 49		     jne Invalid              ; jump if cell is not empty
 000001FF  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 00000202  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 00000204  EB 51		     jmp Finish

 00000206			Place7:
 00000206  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000209  81 C6 000000EE	     add esi,238              ; increment esi to correct cell
 0000020F  B3 20		     mov bl,' '
 00000211  38 1E		     cmp [esi],bl             ; check if cell is empty
 00000213  75 33		     jne Invalid              ; jump if cell is not empty
 00000215  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 00000218  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 0000021A  EB 3B		     jmp Finish

 0000021C			Place8:
 0000021C  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 0000021F  81 C6 000000F6	     add esi,246              ; increment esi to correct cell
 00000225  B3 20		     mov bl,' '
 00000227  38 1E		     cmp [esi],bl             ; check if cell is empty
 00000229  75 1D		     jne Invalid              ; jump if cell is not empty
 0000022B  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 0000022E  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 00000230  EB 25		     jmp Finish

 00000232			Place9:
 00000232  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000235  81 C6 000000FE	     add esi,254              ; increment esi to correct cell
 0000023B  B3 20		     mov bl,' '
 0000023D  38 1E		     cmp [esi],bl             ; check if cell is empty
 0000023F  75 07		     jne Invalid              ; jump if cell is not empty
 00000241  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 00000244  88 1E		     mov [esi],bl             ; move bl into address pointed to by esi
 00000246  EB 0F		     jmp Finish

 00000248			Invalid:
 00000248  BA 00000191 R	     mov  edx,OFFSET sInvalidChoice
 0000024D  E8 00000000 E	     call WriteString
 00000252  E9 FFFFFE89		     jmp  Validate

 00000257			Finish:
				     ; clean up stack frame
 00000257  61			     popad
 00000258  5D			     pop  ebp
 00000259  C2 0008		     ret 8
 0000025C			chooseSquare ENDP

				; Checks to see if either player has won by looking for runs of 3 X's or O's, depending
				; on whether the most recent move was made by X or O. This is done by looking at 
				; particular cell in the board array. For example, a run in the first row would mean
				; that cell 30, 38, and 46 would all be either X or O.
				;    Receives: [ebp +  8] = address of board  
				;              [ebp + 12] = currentPlayer
				;              [ebp + 16] = winner
				;    Returns:  0 in winner if no winner found, 1 in winner if winner found
 0000025C			checkWinner PROC
				    ; prepare stack frame
 0000025C  55			     push ebp
 0000025D  8B EC		     mov  ebp,esp
 0000025F  60			     pushad

 00000260  8A 5D 0C		     mov bl,[ebp + 12]        ; move currentPlayer into bl
 00000263  8B 7D 10		     mov edi,[ebp + 16]       ; store address of winner in edi

 00000266			CheckRow1:
 00000266  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000269  83 C6 1E		     add esi,30               ; increment esi to correct cell
 0000026C  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 0000026E  75 13		     jne CheckRow2            ; no winner here, so check next row, column, or diagonal
 00000270  83 C6 08		     add esi,8                ; increment esi to next cell
 00000273  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000275  75 0C		     jne CheckRow2            ; no winner here, so check next row, column, or diagonal
 00000277  83 C6 08		     add esi,8                ; increment esi to next cell
 0000027A  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 0000027C  75 05		     jne CheckRow2            ; no winner here, so check next row, column, or diagonal
 0000027E  E9 000000C2		     jmp WinnerFound          ; if we've made it this far then we have a winner

 00000283			CheckRow2:
 00000283  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000286  81 C6 00000086	     add esi,134              ; increment esi to correct cell
 0000028C  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 0000028E  75 13		     jne CheckRow3            ; no winner here, so check next row, column, or diagonal
 00000290  83 C6 08		     add esi,8                ; increment esi to next cell
 00000293  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000295  75 0C		     jne CheckRow3            ; no winner here, so check next row, column, or diagonal
 00000297  83 C6 08		     add esi,8                ; increment esi to next cell
 0000029A  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 0000029C  75 05		     jne CheckRow3            ; no winner here, so check next row, column, or diagonal
 0000029E  E9 000000A2		     jmp WinnerFound          ; if we've made it this far then we have a winner

 000002A3			CheckRow3:
 000002A3  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000002A6  81 C6 000000EE	     add esi,238              ; increment esi to correct cell
 000002AC  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000002AE  75 13		     jne CheckColumn1         ; no winner here, so check next row, column, or diagonal
 000002B0  83 C6 08		     add esi,8                ; increment esi to next cell
 000002B3  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000002B5  75 0C		     jne CheckColumn1         ; no winner here, so check next row, column, or diagonal
 000002B7  83 C6 08		     add esi,8                ; increment esi to next cell
 000002BA  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000002BC  75 05		     jne CheckColumn1         ; no winner here, so check next row, column, or diagonal
 000002BE  E9 00000082		     jmp WinnerFound          ; if we've made it this far then we have a winner

 000002C3			CheckColumn1:
 000002C3  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000002C6  83 C6 1E		     add esi,30               ; increment esi to correct cell
 000002C9  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000002CB  75 10		     jne CheckColumn2         ; no winner here, so check next row, column, or diagonal
 000002CD  83 C6 68		     add esi,104              ; increment esi to next cell
 000002D0  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000002D2  75 09		     jne CheckColumn2         ; no winner here, so check next row, column, or diagonal
 000002D4  83 C6 68		     add esi,104              ; increment esi to next cell
 000002D7  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000002D9  75 02		     jne CheckColumn2         ; no winner here, so check next row, column, or diagonal
 000002DB  EB 68		     jmp WinnerFound          ; if we've made it this far then we have a winner

 000002DD			CheckColumn2:
 000002DD  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000002E0  83 C6 26		     add esi,38               ; increment esi to correct cell
 000002E3  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000002E5  75 10		     jne CheckColumn3         ; no winner here, so check next row, column, or diagonal
 000002E7  83 C6 68		     add esi,104              ; increment esi to next cell
 000002EA  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000002EC  75 09		     jne CheckColumn3         ; no winner here, so check next row, column, or diagonal
 000002EE  83 C6 68		     add esi,104              ; increment esi to next cell
 000002F1  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000002F3  75 02		     jne CheckColumn3         ; no winner here, so check next row, column, or diagonal
 000002F5  EB 4E		     jmp WinnerFound          ; if we've made it this far then we have a winner

 000002F7			CheckColumn3:
 000002F7  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 000002FA  83 C6 2E		     add esi,46               ; increment esi to correct cell
 000002FD  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 000002FF  75 10		     jne CheckDiagonal1       ; no winner here, so check next row, column, or diagonal
 00000301  83 C6 68		     add esi,104              ; increment esi to next cell
 00000304  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000306  75 09		     jne CheckDiagonal1       ; no winner here, so check next row, column, or diagonal
 00000308  83 C6 68		     add esi,104              ; increment esi to next cell
 0000030B  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 0000030D  75 02		     jne CheckDiagonal1       ; no winner here, so check next row, column, or diagonal
 0000030F  EB 34		     jmp WinnerFound          ; if we've made it this far then we have a winner

 00000311			CheckDiagonal1:
 00000311  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 00000314  83 C6 1E		     add esi,30               ; increment esi to correct cell
 00000317  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000319  75 10		     jne CheckDiagonal2       ; no winner here, so check next row, column, or diagonal
 0000031B  83 C6 70		     add esi,112              ; increment esi to next cell
 0000031E  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000320  75 09		     jne CheckDiagonal2       ; no winner here, so check next row, column, or diagonal
 00000322  83 C6 70		     add esi,112              ; increment esi to next cell
 00000325  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000327  75 02		     jne CheckDiagonal2       ; no winner here, so check next row, column, or diagonal
 00000329  EB 1A		     jmp WinnerFound          ; if we've made it this far then we have a winner

 0000032B			CheckDiagonal2:
 0000032B  8B 75 08		     mov esi,[ebp + 8]        ; move address of board into esi
 0000032E  83 C6 2E		     add esi,46               ; increment esi to correct cell
 00000331  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000333  75 19		     jne NoWinnerFound        ; no winner here, so no winner at all
 00000335  83 C6 60		     add esi,96               ; increment esi to next cell
 00000338  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 0000033A  75 12		     jne NoWinnerFound        ; no winner here, so no winner at all
 0000033C  83 C6 60		     add esi,96               ; increment esi to next cell
 0000033F  38 1E		     cmp [esi],bl             ; check if cell is the same as currentPlayer
 00000341  75 0B		     jne NoWinnerFound        ; no winner here, so no winner at all
 00000343  EB 00		     jmp WinnerFound          ; if we've made it this far then we have a winner

 00000345			WinnerFound:
 00000345  BA 00000001		     mov edx,1
 0000034A  89 17		     mov [edi],edx
 0000034C  EB 09		     jmp Finish

 0000034E			NoWinnerFound:
 0000034E  BA 00000000		     mov edx,0
 00000353  89 17		     mov [edi],edx
 00000355  EB 00		     jmp Finish

 00000357			Finish:
				     ; clean up stack frame
 00000357  61			     popad
 00000358  5D			     pop  ebp
 00000359  C2 000C		     ret 12
 0000035C			checkWinner ENDP

				; Prints winner and increments that player's score.
				;    Receives: [ebp +  8] = currentPlayer
				;              [ebp + 12] = address of playerXwins
				;              [ebp + 16] = address of playerOwins
				;    Returns:  nothing
 0000035C			processWinner PROC
				    ; prepare stack frame
 0000035C  55			     push ebp
 0000035D  8B EC		     mov  ebp,esp
 0000035F  60			     pushad

				     ; process arguments
 00000360  8B 45 08		     mov eax,[ebp + 8]
 00000363  8B 75 0C		     mov esi,[ebp + 12]            ; move address of playerXwins into esi
 00000366  8B 7D 10		     mov edi,[ebp + 16]            ; move address of playerOwins into edi

				     ; print winner
 00000369  E8 00000000 E	     call WriteChar
 0000036E  BA 000001B3 R	     mov edx,OFFSET sWins
 00000373  E8 00000000 E	     call WriteString
 00000378  E8 00000000 E	     call Crlf

				     ; increment wins
 0000037D  3C 58		     cmp al,'X'
 0000037F  74 04		     je IncrementXwins
 00000381  3C 4F		     cmp al,'O'
 00000383  74 07		     je IncrementOwins

 00000385			IncrementXwins:
 00000385  8B 1E		     mov ebx,[esi]
 00000387  43			     inc ebx
 00000388  89 1E		     mov [esi],ebx
 0000038A  EB 07		     jmp PrintScores

 0000038C			IncrementOwins:
 0000038C  8B 1F		     mov ebx,[edi]
 0000038E  43			     inc ebx
 0000038F  89 1F		     mov [edi],ebx
 00000391  EB 00		     jmp PrintScores

				     ; print scores
 00000393			PrintScores:
 00000393  B0 58		     mov al,'X'
 00000395  E8 00000000 E	     call WriteChar
 0000039A  BA 000001BA R	     mov edx,OFFSET sWinCount
 0000039F  E8 00000000 E	     call WriteString
 000003A4  8B 06		     mov eax,[esi]
 000003A6  E8 00000000 E	     call WriteDec
 000003AB  E8 00000000 E	     call Crlf

 000003B0  B0 4F		     mov al,'O'
 000003B2  E8 00000000 E	     call WriteChar
 000003B7  BA 000001BA R	     mov edx,OFFSET sWinCount
 000003BC  E8 00000000 E	     call WriteString
 000003C1  8B 07		     mov eax,[edi]
 000003C3  E8 00000000 E	     call WriteDec
 000003C8  E8 00000000 E	     call Crlf

				     ; clean up stack frame
 000003CD  61			     popad
 000003CE  5D			     pop  ebp
 000003CF  C2 000C		     ret 12
 000003D2			processWinner ENDP

				; Checks to see if either player has won by looking for runs of 3 X's or O's. This is
				; done by looking at particular cells in the board array. For example, a run in the
				; first row would mean that cells 30, 38, and 46 would all be either X or O. If winner
				;    Receives: [ebp + 8] = address of currentPlayer  
				;    Returns:  0 in EAX if no winner found, 1 in EAX if winner found
 000003D2			switchPlayer PROC
				    ; prepare stack frame
 000003D2  55			     push ebp
 000003D3  8B EC		     mov  ebp,esp
 000003D5  60			     pushad

				     ; get currentPlayer char
 000003D6  8B 75 08		     mov esi,[ebp + 8]        ; move address of currentPlayer into esi
 000003D9  8B 1E		     mov ebx,[esi]            ; move character pointed to by eax to ebx

				     ; prepare registers for comparison
 000003DB  B9 00000058		     mov ecx,'X'
 000003E0  BA 0000004F		     mov edx,'O'

				     ; compare 
 000003E5  3A D9		     cmp bl,cl                ; currentPlayer is X so switch to O
 000003E7  74 04		     je XtoO
 000003E9  3A DA		     cmp bl,dl                ; currentPlayer is O so switch to X
 000003EB  74 04		     je OtoX

				     ; swap currentPlayer
 000003ED			XtoO:
 000003ED  8A DA		     mov bl,dl
 000003EF  EB 04		     jmp Finish
 000003F1			OtoX:
 000003F1  8A D9		     mov bl,cl
 000003F3  EB 00		     jmp Finish
				     
 000003F5			Finish:
				     ; move back into currentPlayer via address in esi
 000003F5  88 1E		     mov [esi],bl

				     ; clean up stack frame
 000003F7  61			     popad
 000003F8  5D			     pop  ebp
 000003F9  C2 0004		     ret 4
 000003FC			switchPlayer ENDP

				; Prints outro.
				;    Receives: nothing
				;    Returns:  nothing
 000003FC			printOutro PROC
				    ; prepare stack frame
 000003FC  55			     push ebp
 000003FD  8B EC		     mov  ebp,esp
 000003FF  60			     pushad

				     ; procedure code here
 00000400  BA 00000162 R	     mov edx,OFFSET sOutro
 00000405  E8 00000000 E	     call WriteString
 0000040A  E8 00000000 E	     call Crlf

				     ; clean up stack frame
 0000040F  61			     popad
 00000410  5D			     pop  ebp
 00000411  C3			     ret
 00000412			printOutro ENDP

				END main
Microsoft (R) Macro Assembler Version 14.10.25019.0	    09/02/17 17:59:53
TicTacToe.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001C2 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000412 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkWinner  . . . . . . . . . .	P Near	 0000025C _TEXT	Length= 00000100 Public STDCALL
  CheckRow1  . . . . . . . . . .	L Near	 00000266 _TEXT	
  CheckRow2  . . . . . . . . . .	L Near	 00000283 _TEXT	
  CheckRow3  . . . . . . . . . .	L Near	 000002A3 _TEXT	
  CheckColumn1 . . . . . . . . .	L Near	 000002C3 _TEXT	
  CheckColumn2 . . . . . . . . .	L Near	 000002DD _TEXT	
  CheckColumn3 . . . . . . . . .	L Near	 000002F7 _TEXT	
  CheckDiagonal1 . . . . . . . .	L Near	 00000311 _TEXT	
  CheckDiagonal2 . . . . . . . .	L Near	 0000032B _TEXT	
  WinnerFound  . . . . . . . . .	L Near	 00000345 _TEXT	
  NoWinnerFound  . . . . . . . .	L Near	 0000034E _TEXT	
  Finish . . . . . . . . . . . .	L Near	 00000357 _TEXT	
chooseSquare . . . . . . . . . .	P Near	 000000CA _TEXT	Length= 00000192 Public STDCALL
  Validate . . . . . . . . . . .	L Near	 000000E0 _TEXT	
  Place1 . . . . . . . . . . . .	L Near	 00000176 _TEXT	
  Place2 . . . . . . . . . . . .	L Near	 00000190 _TEXT	
  Place3 . . . . . . . . . . . .	L Near	 000001AA _TEXT	
  Place4 . . . . . . . . . . . .	L Near	 000001C4 _TEXT	
  Place5 . . . . . . . . . . . .	L Near	 000001DA _TEXT	
  Place6 . . . . . . . . . . . .	L Near	 000001F0 _TEXT	
  Place7 . . . . . . . . . . . .	L Near	 00000206 _TEXT	
  Place8 . . . . . . . . . . . .	L Near	 0000021C _TEXT	
  Place9 . . . . . . . . . . . .	L Near	 00000232 _TEXT	
  Invalid  . . . . . . . . . . .	L Near	 00000248 _TEXT	
  Finish . . . . . . . . . . . .	L Near	 00000257 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A4 Public STDCALL
  Play . . . . . . . . . . . . .	L Near	 00000005 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 0000000F _TEXT	
  Win  . . . . . . . . . . . . .	L Near	 00000054 _TEXT	
  Finish . . . . . . . . . . . .	L Near	 00000093 _TEXT	
printBoard . . . . . . . . . . .	P Near	 000000B9 _TEXT	Length= 00000011 Public STDCALL
printIntro . . . . . . . . . . .	P Near	 000000A4 _TEXT	Length= 00000015 Public STDCALL
printOutro . . . . . . . . . . .	P Near	 000003FC _TEXT	Length= 00000016 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
processWinner  . . . . . . . . .	P Near	 0000035C _TEXT	Length= 00000076 Public STDCALL
  IncrementXwins . . . . . . . .	L Near	 00000385 _TEXT	
  IncrementOwins . . . . . . . .	L Near	 0000038C _TEXT	
  PrintScores  . . . . . . . . .	L Near	 00000393 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
switchPlayer . . . . . . . . . .	P Near	 000003D2 _TEXT	Length= 0000002A Public STDCALL
  XtoO . . . . . . . . . . . . .	L Near	 000003ED _TEXT	
  OtoX . . . . . . . . . . . . .	L Near	 000003F1 _TEXT	
  Finish . . . . . . . . . . . .	L Near	 000003F5 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
board  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
choice . . . . . . . . . . . . .	DWord	 00000120 _DATA	
currentPlayer  . . . . . . . . .	Byte	 0000011F _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
playAgainIn  . . . . . . . . . .	Byte	 00000130 _DATA	
playerOwins  . . . . . . . . . .	DWord	 0000012C _DATA	
playerXwins  . . . . . . . . . .	DWord	 00000128 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sIntro . . . . . . . . . . . . .	Byte	 00000132 _DATA	
sInvalidChoice . . . . . . . . .	Byte	 00000191 _DATA	
sOutro . . . . . . . . . . . . .	Byte	 00000162 _DATA	
sPlayAgain . . . . . . . . . . .	Byte	 0000014F _DATA	
sTurn  . . . . . . . . . . . . .	Byte	 00000176 _DATA	
sWinCount  . . . . . . . . . . .	Byte	 000001BA _DATA	
sWins  . . . . . . . . . . . . .	Byte	 000001B3 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winner . . . . . . . . . . . . .	DWord	 00000124 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
